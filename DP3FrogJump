package dp;
/*
 * Given a number of stairs and a frog, the frog wants to climb from the 0th stair to the (N-1)th stair. 
 * At a time the frog can climb either one or two steps. A height[N] array is also given. 
 * Whenever the frog jumps from a stair i to stair j, the energy consumed in the jump is abs(height[i]- height[j]),
 * where abs() means the absolute difference. We need to return the minimum energy that can be used by the frog 
 * to jump from stair 0 to stair N-1.
 * 
 * Solution :
 * I have solved this problem in four appraoches.
 * 1. Recurstion
 * 2. Memoization
 * 3. Tabulation
 * 4. Space optimization
 */
import java.util.Arrays;

public class DP3FrogJump {
	public static  int minimumEnergy_rec(int arr[],int N){
       return minEnergy(N-1,arr);
        
    }
	//recursion - T.C = O(2^n) and S.C = O(n)
	public static int minEnergy(int i,int[] height) {
		//Base Case
		if(i==0) {
			return 0;
		}
		
		//Recursion
		int oneStep = Math.abs(height[i]-height[i-1])+minEnergy(i-1,height);
		int twoStep = Integer.MAX_VALUE;
		if(i>1)
			twoStep = Math.abs(height[i] - height[i-2])+minEnergy(i-2,height);
		
		return Math.min(oneStep, twoStep);
		
	}
	
	//memoization  T.C - O(n) and Space complexity O(n)
	
	public static  int minimumEnergy_mem(int arr[],int N){
		int dp[] = new int[N];
		Arrays.fill(dp, -1);
		
 	       return minEnergy(N-1,arr,dp);
	        
	    }
	public static int minEnergy(int i,int[] height,int[] dp) {
		//Base Case
		if(i==0) {
			return dp[0] =0;
		}
		if(dp[i] != -1)
			return dp[i];
		//Recursion
		int oneStep = Math.abs(height[i]-height[i-1])+minEnergy(i-1,height,dp);
		int twoStep = Integer.MAX_VALUE;
		if(i>1)
			twoStep = Math.abs(height[i] - height[i-2])+minEnergy(i-2,height,dp);
		
		return dp[i] = Math.min(oneStep, twoStep);
		
	}
	
	//Tabulation  T.C - O(n) and Space complexity O(n)
	public static int minimumEnergy_tab(int[] arr,int N) {
		
		int[] dp = new int[N];
		dp[0] = 0;
		
		for(int i=1;i<N;i++) {
			int oneStep = Math.abs(arr[i]-arr[i-1])+dp[i-1];
			int twoStep = Integer.MAX_VALUE;
			if(i>1)
				twoStep = Math.abs(arr[i] - arr[i-2])+dp[i-2]; 
			dp[i] = Math.min(oneStep, twoStep);
		}
		return dp[N-1];
		
	}
	
	//Spare Optimization 
	//We are using only 2 previous values which are i-1 and i-2. so we can use two variable to store them
	// T.C - O(n) and Space complexity O(1).
	
	public static int minimumEnergy(int[] arr,int N) {
		if(N==1) {
			return arr[0];
		}
		int prev2 = 0;
		int prev1 = Math.abs(arr[1]-arr[0]);
		for(int i=2;i<N;i++) {
			int oneStep = Math.abs(arr[i] - arr[i-1])+prev1;
			int twoStep = Math.abs(arr[i] - arr[i-2])+prev2;
			
			int curr = Math.min(oneStep, twoStep);
			prev2 = prev1;
			prev1 = curr;
		}
		return prev1;
	}
	
	
	public static void main(String args[]) {
		int[] heights = {10,20,30,10};
		int n = 4;
		System.out.println(minimumEnergy(heights,n));
	}
	
}
